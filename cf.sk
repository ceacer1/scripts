options:
	Name.GUI: &6» &b&lCoin&3&lFlip
	Name.GUI.Loading: &B&lC&3&lF&r
	Prefix: &b&lFast&3&lGens &8➤

function roomToggleName(p: player):
	if {coinflip.roomtoggle::%{_p}%} is 0:
		set {coinflip.room.selected::%{_p}%} to "&8[&eLow&8]"
	else if {coinflip.roomtoggle::%{_p}%} is 1:
		set {coinflip.room.selected::%{_p}%} to "&8[&6Med&8]"
	else if {coinflip.roomtoggle::%{_p}%} is 2:
		set {coinflip.room.selected::%{_p}%} to "&8[&cHigh&8]"
	else if {coinflip.roomtoggle::%{_p}%} is 3:
		set {coinflip.room.selected::%{_p}%} to "&8[&4Mega&8]"
	else if {coinflip.roomtoggle::%{_p}%} is 4:
		set {coinflip.room.selected::%{_p}%} to "&8[&dUltra&8]"
	else if {coinflip.roomtoggle::%{_p}%} is 5:
		set {coinflip.room.selected::%{_p}%} to "&8[&5Insane&8]"
	else if {coinflip.roomtoggle::%{_p}%} is 6:
		set {coinflip.room.selected::%{_p}%} to "&8[&b&lL&3&lu&b&ld&3&li&b&lc&3&lr&b&lo&3&lu&b&ls&8]"
	make {_p} execute command "cf"

function roomToggle(p: player, type: int = 0):
	if {_type} is 0:
		add 1 to {coinflip.roomtoggle::%{_p}%}
		if {coinflip.roomtoggle::%{_p}%} is 7:
			set {coinflip.roomtoggle::%{_p}%} to 0
		roomToggleName({_p})
	
	if {_type} is 1:
		remove 1 from {coinflip.roomtoggle::%{_p}%}
		if {coinflip.roomtoggle::%{_p}%} is -1:
			set {coinflip.roomtoggle::%{_p}%} to 6
		roomToggleName({_p})

function coinflipCreate(p: player, room: string):
	send "   &7&oLoading..." to {_p}
	wait 1 seconds
	send "   &7&oCreating your CoinFlip..." to {_p}
	wait 2 seconds
	send "   &7&oCoinFlip Created " to {_p}
	send "   &7&oWaiting for a player." to {_p}
	send "   &7&oThis CF has been added to the &8[%{_room}%&8] &7&oroom" to {_p}

function coinflipAnnounce50(p: player, other: string, a: string):
	broadcast ""
	broadcast "        &eCan we get an &d&lF &ein chat for."
	broadcast "        &6%{_p}% &eand &6%{_other}%"
	broadcast "        &eTheir &b&lCoin&3&lFlip &elanded on &8(&b50&8)"
	broadcast "        &eMeaning they both lost &2$&a%{_a}%"
	broadcast ""

function coinflipformatNum50(p: player, other: text, n: number) :: string:
	set {_l::*} to split "k,M,B,T,Qn,Qi,Sx" at ","
	set {_i} to min(floor(log({_n})/3), size of {_l::*})
	return "%{_n}%" if {_i} <= 0
	set {_i2} to 1000^{_i}
	set {_bet} to "%{_n}/{_i2}%%{_l::%{_i}%}%"
	wait 5 seconds
	coinflipAnnounce50({_p}, "%{_other}%", "%{_bet}%")

function coinflipformatNum(p: player, room: string, n: number) :: string:
	set {_l::*} to split "k,M,B,T,Qn,Qi,Sx" at ","
	set {_i} to min(floor(log({_n})/3), size of {_l::*})
	return "%{_n}%" if {_i} <= 0
	set {_i2} to 1000^{_i}
	set {_bet} to "%{_n}/{_i2}%%{_l::%{_i}%}%"
	wait 5 seconds
	coinflipAnnounce({_p}, "%{_room}%", "%{_bet}%")

function coinflipAnnounce(p: player, room: string, bet: string):
	broadcast ""
	broadcast "        &6&l%{_p}% &ehas made a &b&lCoin&3&lFlip"
	broadcast "        &eBet Amount: &2$&a%{_bet}%"
	broadcast "        &eRoom: &8[%{_room}%&8]"
	broadcast ""

on inventory close:
	if event-inventory's display name contains "{@Name.GUI}":
		set {cf.open::%player%} to false

command /cf [<text>] [<int>] [<player>]:
	aliases: /coinflip, /cflip, /coinf
	trigger:
		if arg 1 is not set:
			if {help.read::%uuid of player%} is false:
				open virtual hopper inventory named "{@Name.GUI}" to player
				format a gui slot 0, 1, 2, 3 and 4 of player with glowing book named "&e&lRead Me" with lore "&e&lClick Me" to close then run player command "/cf help"
				set {help.read::%uuid of player%} to true
			else:
				set {_bal} to player' balance
				create a gui with virtual chest named "{@Name.GUI}" with 4 rows:
					make gui slot 27 to feather named "&6» &eInformation" with lore "", "&6» &eYour Money&7: &c%{_bal}%", "&6» &eNumber of CoinFlips won&7: &a%{coinflip.win::%player%}%" and "&6» &eNumber of CoinFlips Lost&7: &c%{coinflip.lose::%player%}%"
					make gui slot 31 to glowing book named "&6» &eInformation" with lore "", "&6» &eCommands", "", "&6» &e/cf help", "&6» &e/cf create <amount>", "&6» &e/cf leave" and ""
					make gui slot 33 to skull of "DaddyCeacer" parsed as offline player named "&eMade By &6DaddyCeacer"
					set {_slot} to 0
					wait 2 ticks
					set {cf.open::%player%} to true
					if {coinflip.roomtoggle::%player%} is 0:
						loop {coinflip.low::*}:
							set {_text} to loop-value
							make gui slot {_slot} to skull of "%loop-value%" parsed as offline player named "&6» &eCoin Flip" with lore "", "&6» &ePlayer&7: &c%loop-value%" and "&6» &eBet&7: $&c%{coinflip.bet.%loop-value%}%":
								make player execute command "cf play 12 %{_text}%"
							add 1 to {_slot}
							if {cf.open::%player%} is false:
								stop loop
							else:
								continue
					
					else if {coinflip.roomtoggle::%player%} is 1:
						loop {coinflip.med::*}:
							set {_text} to loop-value
							make gui slot {_slot} to skull of "%loop-value%" parsed as offline player named "&6» &eCoin Flip" with lore "", "&6» &ePlayer&7: &c%loop-value%" and "&6» &eBet&7: $&c%{coinflip.bet.%loop-value%}%":
								make player execute command "cf play 12 %{_text}%"
							add 1 to {_slot}
							if {cf.open::%player%} is false:
								stop loop
							else:
								continue
					
					else if {coinflip.roomtoggle::%player%} is 2:
						loop {coinflip.high::*}:
							set {_text} to loop-value
							make gui slot {_slot} to skull of "%loop-value%" parsed as offline player named "&6» &eCoin Flip" with lore "", "&6» &ePlayer&7: &c%loop-value%" and "&6» &eBet&7: $&c%{coinflip.bet.%loop-value%}%":
								make player execute command "cf play 12 %{_text}%"
							add 1 to {_slot}
							if {cf.open::%player%} is false:
								stop loop
							else:
								continue
					
					else if {coinflip.roomtoggle::%player%} is 3:
						loop {coinflip.mega::*}:
							set {_text} to loop-value
							make gui slot {_slot} to skull of "%loop-value%" parsed as offline player named "&6» &eCoin Flip" with lore "", "&6» &ePlayer&7: &c%loop-value%" and "&6» &eBet&7: $&c%{coinflip.bet.%loop-value%}%":
								make player execute command "cf play 12 %{_text}%"
							add 1 to {_slot}
							if {cf.open::%player%} is false:
								stop loop
							else:
								continue
					
					else if {coinflip.roomtoggle::%player%} is 4:
						loop {coinflip.ultra::*}:
							set {_text} to loop-value
							make gui slot {_slot} to skull of "%loop-value%" parsed as offline player named "&6» &eCoin Flip" with lore "", "&6» &ePlayer&7: &c%loop-value%" and "&6» &eBet&7: $&c%{coinflip.bet.%loop-value%}%":
								make player execute command "cf play 12 %{_text}%"
							add 1 to {_slot}
							if {cf.open::%player%} is false:
								stop loop
							else:
								continue
					
					else if {coinflip.roomtoggle::%player%} is 5:
						loop {coinflip.insane::*}:
							set {_text} to loop-value
							make gui slot {_slot} to skull of "%loop-value%" parsed as offline player named "&6» &eCoin Flip" with lore "", "&6» &ePlayer&7: &c%loop-value%" and "&6» &eBet&7: $&c%{coinflip.bet.%loop-value%}%":
								make player execute command "cf play 12 %{_text}%"
							add 1 to {_slot}
							if {cf.open::%player%} is false:
								stop loop
							else:
								continue
					
					else if {coinflip.roomtoggle::%player%} is 6:
						loop {coinflip.ludicrous::*}:
							set {_text} to loop-value
							make gui slot {_slot} to skull of "%loop-value%" parsed as offline player named "&6» &eCoin Flip" with lore "", "&6» &ePlayer&7: &c%loop-value%" and "&6» &eBet&7: $&c%{coinflip.bet.%loop-value%}%":
								make player execute command "cf play 12 %{_text}%"
							add 1 to {_slot}
							if {cf.open::%player%} is false:
								stop loop
							else:
								continue

					make gui slot 35 to stone button named "&6» &eChange Room" with lore "", "&6» &eLow Roller &8(&2$&a1000 &e» &2$&a499k&8)", "&6» &6Med &eRoller &8(&2$&a500k &e» &2$&a4.9M&8)", "&6» &cHigh &eRoller &8(&2$&a5M &e» &2$&a249M&8)", "&6» &4Mega &eRoller &8(&2$&a250M &e» &2$&a999M&8)", "&6» &dUltra &eRoller &8(&2$&a1B &e» &2$&a1.9B&8)", "&6» &5Insane &eRoller &8(&2$&a2B &e» &2$&a9.9B&8)", "&6» &b&lL&3&lu&b&ld&3&li&b&lc&3&lr&b&lo&3&lu&b&ls &eRoller &8(&2$&a10B &eand up&8)", "",  "&6» &eCurrent %{coinflip.room.selected::%player%}%", "", "&a&lLeft Click &7- &eNext Room" and "&a&lRight Click &7- &ePrevious Room":
						if click type is left mouse button:
							roomToggle(player, 0)
						if click type is right mouse button:	
							roomToggle(player, 1)
						
				open last gui to player
				stop	
		
		if arg-1 is "leave":
			if {cf.%player%} is true:
				send "{@Prefix} &eYour bet of &2$&a%{coinflip.bet.%player%}% &ehas been refunded."
				make console execute command "eco give %player% %{coinflip.bet.%player%}%"
				clear {coinflip.bet.%player%}
				remove player from {coinflip::*}
				remove player from {coinflip.low::*}
				remove player from {coinflip.med::*}
				remove player from {coinflip.high::*}
				remove player from {coinflip.mega::*}   
				remove player from {coinflip.ultra::*}
				remove player from {coinflip.insane::*}
				remove player from {coinflip.ludicrous::*}
				clear {cf.%player%}
			else:
				send "{@Prefix} &eYou do not have an open &b&lC&3&lF."

		#if arg-1 is "top":
		#	loop {coinflip.win::*}:
		#		add 1 to {_size}
		#		if {_low.to.high.list::%loop-value%} is not set:
		#			set {_low.to.high.list::%loop-value%} to loop-index
		#		else:
		#			set {_n} to 0
		#			loop {_size} times:
		#				set {_n} to {_n}+1
		#				{_low.to.high.list::%loop-value-1%.%{_n}%} is not set
		#				set {_low.to.high.list::%loop-value-1%.%{_n}%} to loop-index
		#				stop loop
		#	wait 1 tick
		#	set {_n} to size of {_low.to.high.list::*}
		#	loop {_low.to.high.list::*}:
		#		set {_high.to.low.list::%{_n}%} to loop-value
		#		set {_n} to {_n}-1
		#	wait 1 tick
		#	set {_i} to 0
		#	send ""
		#	send "&8&m-----&8< &6Top10 &8>&8&m-----"
		#	loop {_high.to.low.list::*}:
		#		add 1 to {_topnumber}
		#		set {_player} to "%loop-value%" parsed as offlineplayer
		#		send "&7%{_topnumber}% - &e%{_player}% &8» &7%{coinflip.win::%loop-value%}% Wins"
		#		add 1 to {_i}
		#		if {_topnumber} = 10: #this is top 10 you can change it
		#			exit loop
		#	send ""
#
		#if arg-1 is "bottom":
		#	loop {coinflip.lose::*}:
		#		add 1 to {_size}
		#		if {_low.to.high.list::%loop-value%} is not set:
		#			set {_low.to.high.list::%loop-value%} to loop-index
		#		else:
		#			set {_n} to 0
		#			loop {_size} times:
		#				set {_n} to {_n}+1
		#				{_low.to.high.list::%loop-value-1%.%{_n}%} is not set
		#				set {_low.to.high.list::%loop-value-1%.%{_n}%} to loop-index
		#				stop loop
		#	wait 1 tick
		#	set {_n} to size of {_low.to.high.list::*}
		#	loop {_low.to.high.list::*}:
		#		set {_high.to.low.list::%{_n}%} to loop-value
		#		set {_n} to {_n}-1
		#	wait 1 tick
		#	set {_i} to 0
		#	send ""
		#	send "&8&m-----&8< &6Bottom10 &8>&8&m-----"
		#	loop {_high.to.low.list::*}:
		#		add 1 to {_topnumber}
		#		set {_player} to "%loop-value%" parsed as offlineplayer
		#		send "&7%{_topnumber}% - &e%{_player}% &8» &7%{coinflip.lose::%loop-value%}% Losses"
		#		add 1 to {_i}
		#		if {_topnumber} = 10: #this is top 10 you can change it
		#			exit loop
		#	send ""

		if arg 1 is "h" or "help":
			send ""
			send "{@Prefix} &b&lCoin&r &l&3Flip&r"
			send ""
			send "&c&l» &eTo make a &b&lC&3&lF &r&edo &6&o/cf create <amount>"
			send "&c&l» &eOnce a &b&lC&3&lF &r&eis made you will have to wait for another player to play it."
			send ""
			send "&c&l» &eYou can change rooms by clicking on the button in &6&o/cf "
			send ""
			send "&c&l» &eA number between &8(&b0&8) &eand &8(&b100&8) &ewill be selected"
			send "&c&l» &eIf the number lands on &8(&b50&8) &eneither of you win"
			send ""
			send "&c&l» &eIf you log off before your &b&lC&3&lF &r&eis played, your money will be returned."
			send ""
			send "&c&l» &eYou can use &6&o/cf leave &eto leave your &b&lC&3&lF"
			send ""
			send "&c&l» &eTen percent of final bet will be taken."
			send ""

		if arg 1 is "create":
			if arg 2 is set:		
				if player's balance is greater than or equal to arg-2:
					if {cf.%player%} is not set:	
						if arg 2 is between 1000 and 499999:
							if (amount of {coinflip.low::*}) < 27:
								set {cf.%player%} to true
								set {coinflip.bet.%player%} to arg 2
								add player to {coinflip::*}
								add player to {coinflip.low::*}
								make console execute command "eco take %player% %{coinflip.bet.%player%}%"
								coinflipCreate(player, "&eLow")
							else:
								send "{@Prefix} &eYou cannot create one at the moment, the room is full."

						if arg 2 is between 500000 and 4999999:
							if (amount of {coinflip.med::*}) < 27:
								set {cf.%player%} to true
								add player to {coinflip::*}
								add player to {coinflip.med::*}
								set {coinflip.bet.%player%} to arg 2
								make console execute command "eco take %player% %{coinflip.bet.%player%}%"
								coinflipCreate(player, "&6Med")
							else:
								send "{@Prefix} &eYou cannot create one at the moment, the room is full."

						if arg 2 is between 5000000 and 249999999:
							if (amount of {coinflip.high::*}) < 27:
								set {cf.%player%} to true
								add player to {coinflip::*}
								add player to {coinflip.high::*}
								set {coinflip.bet.%player%} to arg 2
								make console execute command "eco take %player% %{coinflip.bet.%player%}%"
								coinflipCreate(player, "&cHigh")
							else:
								send "{@Prefix} &eYou cannot create one at the moment, the room is full."

						if arg 2 is between 250000000 and 999999999:
							if (amount of {coinflip.mega::*}) < 27:
								set {cf.%player%} to true
								add player to {coinflip::*}
								add player to {coinflip.mega::*}
								set {coinflip.bet.%player%} to arg 2
								make console execute command "eco take %player% %{coinflip.bet.%player%}%"
								coinflipCreate(player, "&4Mega")
							else:
								send "{@Prefix} &eYou cannot create one at the moment, the room is full."

						if arg 2 is between 1000000000 and 1999999999:
							if (amount of {coinflip.ultra::*}) < 27:
								set {cf.%player%} to true
								add player to {coinflip::*}
								add player to {coinflip.ultra::*}
								set {coinflip.bet.%player%} to arg 2
								make console execute command "eco take %player% %{coinflip.bet.%player%}%"
								coinflipCreate(player, "&dUltra")
								coinflipformatNum(player, "&dUltra", {coinflip.bet.%player%})
							else:
								send "{@Prefix} &eYou cannot create one at the moment, the room is full."

						if arg 2 is between 2000000000 and 9999999999:
							if (amount of {coinflip.insane::*}) < 27:
								set {cf.%player%} to true
								add player to {coinflip::*}
								add player to {coinflip.insane::*}
								set {coinflip.bet.%player%} to arg 2
								make console execute command "eco take %player% %{coinflip.bet.%player%}%"
								coinflipCreate(player, "&5Insane")
								coinflipformatNum(player, "&5Insane", {coinflip.bet.%player%})
							else:
								send "{@Prefix} &eYou cannot create one at the moment, the room is full."

						if arg 2 is more than 9999999999:
							if (amount of {coinflip.ludicrous::*}) < 27:
								set {cf.%player%} to true
								add player to {coinflip::*}
								add player to {coinflip.ludicrous::*}
								set {coinflip.bet.%player%} to arg 2
								make console execute command "eco take %player% %{coinflip.bet.%player%}%"
								coinflipCreate(player, "&b&lL&3&lu&b&ld&3&li&b&lc&3&lr&b&lo&3&lu&b&ls")
								coinflipformatNum(player, "&b&lL&3&lu&b&ld&3&li&b&lc&3&lr&b&lo&3&lu&b&ls", {coinflip.bet.%player%})
							else:
								send "{@Prefix} &eYou cannot create one at the moment, the room is full."
					else:
						send "{@Prefix} &eYou cannot create another one at the moment."		
				else:
					send "{@Prefix} &eYou do not have enough money."
			else:
				send "{@Prefix} &ePlease enter an amount."		

		if arg 1 is "play":
			if arg 2 is set:
				if arg 3 is set:
					if arg 3 is online:
						if arg 3 is not player:
							if player's balance is greater than or equal to {coinflip.bet.%arg-3%}:
								if {cf.%player%} is not set:
									if {cf.%arg-3%} is set:
										clear {cf.%arg-3%}
										clear {cf.%player%}
										send "{@Prefix} &7&oLoading ..."
										send "{@Prefix} &7&oLoading ..." to arg 3		
										wait 3 ticks
										send "{@Prefix} &7&oCoinFlip Opening"
										send "{@Prefix} &7&oCoinFlip Opening" to arg 3
										make console execute command "eco take %player% %{coinflip.bet.%arg-3%}%"
										set {FinalBet.%player%} to {coinflip.bet.%arg-3%} + {coinflip.bet.%arg-3%}
										set {FinalBet.%player%} to (({FinalBet.%player%}/100) * 90)
										add player to {Cf.%player%::*}
										add arg 3 to {Cf.%player%::*}
										remove arg 3 from {coinflip::*}
										remove arg 3 from {coinflip.low::*}
										remove arg 3 from {coinflip.med::*}
										remove arg 3 from {coinflip.high::*}
										remove arg 3 from {coinflip.mega::*}
										remove arg 3 from {coinflip.ultra::*}
										remove arg 3 from {coinflip.insane::*}
										remove arg 3 from {coinflip.ludicrous::*}								
										loop 5 times:
											open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading." to player
											open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading." to arg 3		
											wait 3 ticks
											open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading.." to player
											open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading.." to arg 3									
											wait 3 ticks
											open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading..." to player
											open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading..." to arg 3
											wait 3 ticks
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading.." to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading.." to arg 3
										wait 3 ticks
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading." to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading." to arg 3
										wait 3 ticks							
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading" to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoading" to arg 3
										wait 3 ticks							
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoadin" to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoadin" to arg 3
										wait 3 ticks
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoadi" to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoadi" to arg 3								
										wait 3 ticks							
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoad" to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoad" to arg 3
										wait 3 ticks
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoa" to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLoa" to arg 3
										wait 3 ticks
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLo" to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oLo" to arg 3
										wait 3 ticks		
										open chest with 1 row named "{@Name.GUI.Loading} &7&oL" to player
										open chest with 1 row named "{@Name.GUI.Loading} &7&oL" to arg 3
										wait 3 ticks	
										open chest with 1 row named "{@Name.GUI.Loading}" to player
										open chest with 1 row named "{@Name.GUI.Loading}" to arg 3
										wait 3 ticks		
										set {_slot} to 0
										loop 25 times:
											loop 9 times:
												set {_RI} to random integer between 1 and 15
												set {_FIGURE} to random integer between 9999 and 99999
												if event-inventory's display name is "{@Name.GUI.Loading}":
													evaluate "format gui slot %{_slot}% of player with 160:%{_RI}% named ""&6» &e%{_FIGURE}%"" to do nothing"
												if event-inventory's display name is "{@Name.GUI.Loading}":
													if {_RI} = 1:
														format gui slot {_slot} of arg 3 with orange glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with orange glass named "&6» &e%{_FIGURE}%" to do nothing												
													if {_RI} = 2:
														format gui slot {_slot} of arg 3 with magenta glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with magenta glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 3:
														format gui slot {_slot} of arg 3 with light blue glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with light blue glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 4:
														format gui slot {_slot} of arg 3 with yellow glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with yellow glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 5:
														format gui slot {_slot} of arg 3 with light green glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with light green glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 6:
														format gui slot {_slot} of arg 3 with pink glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with pink glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 7:
														format gui slot {_slot} of arg 3 with gray glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with gray glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 8:
														format gui slot {_slot} of arg 3 with light gray glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with light gray glass named "&6» &e%{_FIGURE}%" to do nothing	
													if {_RI} = 9:
														format gui slot {_slot} of arg 3 with cyan glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with cyan glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 10:
														format gui slot {_slot} of arg 3 with purple glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with purple glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 11:
														format gui slot {_slot} of arg 3 with blue glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with blue glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 12:
														format gui slot {_slot} of arg 3 with brown glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with brown glass named "&6» &e%{_FIGURE}%" to do nothing	
													if {_RI} = 13:
														format gui slot {_slot} of arg 3 with green glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with green glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 14:
														format gui slot {_slot} of arg 3 with red glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with red glass named "&6» &e%{_FIGURE}%" to do nothing
													if {_RI} = 15:
														format gui slot {_slot} of arg 3 with black glass named "&6» &e%{_FIGURE}%" to do nothing
														format gui slot {_slot} of player with black glass named "&6» &e%{_FIGURE}%" to do nothing												
												add 1 to {_slot}
											set {_FIGURE} to random integer between 1 and 2
											if {_FIGURE} = 1:
												if event-inventory's display name is "{@Name.GUI.Loading}":
													format gui slot 4 of arg 3 with skull of "%player%" parsed as offline player named "&6» &e%player%" to do nothing
												if event-inventory's display name is "{@Name.GUI.Loading}":
													format gui slot 4 of player with skull of "%arg-3%" parsed as offline player named "&6» &e%arg-3%" to do nothing
											else if {_FIGURE} = 2:
												if event-inventory's display name is "{@Name.GUI.Loading}":
													format gui slot 4 of arg 3 with skull of "%arg-3%" parsed as offline player named "&6» &e%arg-3%" to do nothing
												if event-inventory's display name is "{@Name.GUI.Loading}":
													format gui slot 4 of player with skull of "%player%" parsed as offline player named "&6» &e%player%" to do nothing									
											set {_slot} to 0
											wait 3 ticks		
										set {_END} to random integer between 0 and 100
										close player's inventory
										close arg 3's inventory
										if {_END} > 51:
											add 1 to {coinflip.win::%player%} 
											add 1 to {coinflip.lose::%arg-3%}								
											send ""
											send "" to arg 3
											send ""
											send "" to arg 3
											send "{@Prefix} &7&oYou won the Coinflip !"
											send "{@Prefix} &7&oYou lost the CoinFlip !" to arg 3
											send "{@Prefix} &7&oSo you won &6$%{FinalBet.%player%}%"
											send "{@Prefix} &7&oYou lost &6$%{coinflip.bet.%arg-3%}%" to arg 3
											send "{@Prefix} &7The winning number was &6%{_END}%" to arg 3
											send "{@Prefix} &7The winning number was &6%{_END}%"
											send ""
											send "" to arg 3
											send ""
											send "" to arg 3
											make console execute command "eco give %player% %{FinalBet.%player%}%"
										if {_END} < 49:
											add 1 to {coinflip.lose::%player%} 
											add 1 to {coinflip.win::%arg-3%}
											send ""
											send "" to arg 3
											send ""
											send "" to arg 3
											send "{@Prefix} &7&oYou won the Coinflip !" to arg 3
											send "{@Prefix} &7&oYou lost the CoinFlip !" 
											send "{@Prefix} &7&oSo you won &6$%{FinalBet.%player%}%" to arg 3
											send "{@Prefix} &7&oYou lost &6$%{coinflip.bet.%arg-3%}%"
											send "{@Prefix} &7The winning number was &6%{_END}%" to arg 3
											send "{@Prefix} &7The winning number was &6%{_END}%"									
											send ""
											send "" to arg 3
											send ""
											send "" to arg 3
											make console execute command "eco give %arg-3% %{FinalBet.%player%}%"		
										else if {_END} is 50:
											add 1 to {coinflip.lose::%player%} 
											add 1 to {coinflip.lose::%arg-3%}
											send ""
											send "" to arg 3
											send ""
											send "" to arg 3
											send "{@Prefix} &7&oYou lost the Coinflip !" to arg 3
											send "{@Prefix} &7&oYou lost the CoinFlip !" 
											send "{@Prefix} &7&oYou lost &6$%{coinflip.bet.%arg-3%}%" to arg 3
											send "{@Prefix} &7&oYou lost &6$%{coinflip.bet.%arg-3%}%"
											send "{@Prefix} &7The winning number was &6%{_END}%" to arg 3
											send "{@Prefix} &7The winning number was &6%{_END}%"	
											send "{@Prefix} &7Therefore you both lost &6%{_END}%" to arg 3
											send "{@Prefix} &7Therefore you both lost &6%{_END}%"								
											send ""
											send "" to arg 3
											send ""
											send "" to arg 3
											set {_otherplayer} to arg-3
											coinflipformatNum50(player, "%{_otherplayer}%", {coinflip.bet.%arg-3%})
										clear {coinflip.bet.%arg-3%}
										stop
									else:
										send "{@Prefix} &eSomeone has already played this CF."
										close player's inventory	
								else:
									send "{@Prefix} &eYou cannot play a CF while you have one set."
									send "{@Prefix} &eUse &6&o/cf leave &ebefore trying again."
									close player's inventory	
							else:
								send "{@Prefix} &eYou do not have enough money."
								close player's inventory
						else:
							send "{@Prefix} &eYou can't play alone."	
							close player's inventory									
					
		if arg 1 is "reload" or "rl":
			if player has permission "cf.admin":
				set {_t} to now
				make player execute command "sk reload %script name%"
				send "&6[&eCoinFlip&6] &eSkript created by &aDaddy&5Ceacer &7(Skript reload in &8%difference between now and {_t}%&7)"
			else:
				send "&cYou do not have the required permission to do this."
		
		#if arg 1 is "dl":
		#	if player has permission "cf.admin":
		#		delete file "plugins/Skript/scripts/cf.sk"
		#		download file from "https://raw.githubusercontent.com/ceacer1/scripts/master/cf.sk" to file "plugins/Skript/scripts/cf.sk"
		#		make player say "/cf rl"
		#		
		#	else:
		#		send "&cYou do not have the required permission to do this."


on join:
	if {coinflip.win::%player%} is not set:
		set {coinflip.win::%player%} to 0
	if {coinflip.lose::%player%} is not set:
		set {coinflip.lose::%player%} to 0
	set {coinflip.roomtoggle::%player%} to 0 
	set {coinflip.room.selected::%player%} to "&8[&eLow&8]"
	if {help.read::%uuid of player%} is not set:
		set {help.read::%uuid of player%} to false
		
on quit:
	clear {cf.%player%}
	remove player from {coinflip::*}
	remove player from {coinflip.low::*}
	remove player from {coinflip.med::*}
	remove player from {coinflip.high::*}
	remove player from {coinflip.mega::*}
	remove player from {coinflip.ultra::*}
	remove player from {coinflip.insane::*}
	remove player from {coinflip.ludicrous::*}
	if {cf.%player%} is true:
		make console execute command "eco give %player% %{coinflip.bet.%player%}%"
		clear {coinflip.bet.%player%}
		clear {cf.%player%}

