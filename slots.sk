options:
    GUIName: &3Slots  

variables: 
    {Low} = 100
    {Med} = 1000
    {High} = 10000
    {Mega} = 100000
    {Ultra} = 1000000
    {Insane} = 100000000
    {Ludicrous} = 1000000000

function slotsBetCheck(p: player, room: text, type: number):
    if {_room} is "low":
        set {_min} to 1
        set {_max} to 100
    if {_room} is "med":
        set {_min} to 100
        set {_max} to 1000
    if {_room} is "high":
        set {_min} to 1000
        set {_max} to 10000
    if {_room} is "mega":
        set {_min} to 10000
        set {_max} to 100000
    if {_room} is "ultra":
        set {_min} to 100000
        set {_max} to 1000000
    if {_room} is "insane":
        set {_min} to 1000000
        set {_max} to 100000000
    if {_room} is "ludicrous":
        set {_min} to 100000000
        set {_max} to 1000000000
    if {slotscurrentbet::%{_p}%} is not between {_min} and {_max}:
        set {slotscurrentbet::%{_p}%} to ({_max} / 2)
    set {_minus3} to ({_max}/100 *35)
    set {_minus2} to ({_max}/100 *20)
    set {_minus1} to ({_max}/100 *5)
    set {_add1} to ({_max}/100 *5)
    set {_add2} to ({_max}/100 *20)
    set {_add3} to ({_max}/100 *35)
    if {_type} is 0:
        slotsPlay({_p}, {_room})
    else:
        slotsChangeBet({_p}, {_room}, {_minus3}, {_minus2}, {_minus1}, {_min}, {_max}, {_add1}, {_add2}, {_add3})

function slotsformatNum(n: number) :: string:
    set {_l::*} to split "k,M,B,T,Qn,Qi,Sx" at ","
    set {_i} to min(floor(log({_n})/3), size of {_l::*})
    return "%{_n}%" if {_i} <= 0
    set {_i2} to 1000^{_i}
    set {_n} to "%{_n}/{_i2}%%{_l::%{_i}%}%"
    return {_n}

function slotsChangeBet(p: player, room: text, minus3: number, minus2: number, minus1: number, min: number, max: number, add1: number, add2: number, add3: number):
    create a gui with virtual chest named "Slots" with 1 row:
        make gui slot (0 and 8) to gray glass pane named " "
        loop 3 times:
            make gui slot loop-number to red glass pane named "&c-%slotsformatNum({_minus%4 - loop-number%})%":
                remove {_m1} from {slotscurrentbet::%{_p}%}
                if {slotscurrentbet::%{_p}%} < {_min}:
                    set {slotscurrentbet::%{_p}%} to {_min}
                slotsBetCheck({_p}, {_room}, 1)
        make gui slot 4 to glowing sunflower named "&6Bet" with lore "", "&6Current&7: &8(&2$&a%slotsformatNum({slotscurrentbet::%{_p}%})%&8)", "" and "&a&lClick to reset":
            set {slotscurrentbet::%{_p}%} to ({_max} / 2)
            slotsBetCheck({_p}, {_room}, 1)
        loop 3 times:
            make gui slot (4 + loop-number) to green glass pane named "&a+%slotsformatNum({_add%loop-number%})%":
                add {_add1} to {slotscurrentbet::%{_p}%}
                if {slotscurrentbet::%{_p}%} > {_max}:
                    set {slotscurrentbet::%{_p}%} to {_max}
                slotsBetCheck({_p}, {_room}, 1)
        make gui slot 8 to glowing arrow named "&7Back":
            slotsPlay({_p}, {_room})
    open last gui to {_p}
    stop

function slotsPayouts(p: player, room: text):
    create a gui with virtual chest named "&3Payouts":
        loop 27 times:
            make gui slot (loop-number - 1) to gray glass pane named " "
        make gui slot 10 to Light Gray Dye named "&eLow &7Jackpot" with lore "&7‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾", "&aMatch 2", "&7x0.5 Bet", "&bChance", "&717.4%%", "", "&aMatch 3", "&7x1.0 Jackpot", "&bChance" and "&711.6%%"
        make gui slot 11 to Yellow Dye named "&6Med &7Jackpot" with lore "&7‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾", "&aMatch 2", "&7x0.7 Bet", "&bChance", "&712.6%%", "", "&aMatch 3", "&7x1.125 Jackpot", "&bChance" and "&78.4%%"
        make gui slot 12 to Green Dye named "&cHigh &7Jackpot" with lore "&7‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾", "&aMatch 2", "&7x0.9 Bet", "&bChance", "&78.7%%", "", "&aMatch 3", "&7x1.25 Jackpot", "&bChance" and "&75.8%%"
        make gui slot 13 to Light Blue Dye named "&4Mega &7Jackpot" with lore "&7‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾", "&aMatch 2", "&7x1.2 Bet", "&bChance", "&75.5%%", "", "&aMatch 3", "&7x1.5 Jackpot" , "&bChance" and "&73.7%%"
        make gui slot 14 to Orange Dye named "&dUltra &7Jackpot" with lore "&7‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾", "&aMatch 2", "&7x1.5 Bet", "&bChance", "&73.1%%", "", "&aMatch 3", "&7x1.8 Jackpot" , "&bChance" and "&72.1%%"
        make gui slot 15 to Pink Dye named "&5Insane &7Jackpot" with lore "&7‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾", "&aMatch 2", "&7x1.8 Bet", "&bChance", "&71.5%%", "", "&aMatch 3", "&7x2.1 Jackpot", "&bChance" and "&71.05%%"
        make gui slot 16 to Purple Dye named "&b&lL&3&lu&b&ld&3&li&b&lc&3&lr&b&lo&3&lu&b&ls &7Jackpot" with lore "&7‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾", "&aMatch 2", "&7x2.2 Bet", "&bChance", "&70.79%%", "", "&aMatch 3", "&7x2.5 Jackpot", "&bChance" and "&70.52%%"
        make gui slot 22 to glowing arrow named "&7Back":
            slotsPlay({_p}, {_room})
    open last gui to {_p}
    stop

function slotsPlay(p: player, room: text):
    create a gui with virtual chest named "{@GUIName} &3JP &7- &2$&a%slotsformatNum({slotsjackpot::%{_room}%})%" with 6 rows:
        loop 54 times:
            make gui slot (loop-number - 1) to gray glass pane named " "
        make gui slot 12 to Light Gray Dye named " "
        make gui slot 13 to Yellow Dye named " "
        make gui slot 14 to Green Dye named " "
        make gui slot (21, 22 and 23) to Purple Dye named " "
        make gui slot 30 to Orange Dye named " "
        make gui slot 31 to Pink Dye named " "
        make gui slot 32 to Light Blue Dye named " "
        make gui slot (2, 3, 4, 5, 6, 11, 15, 20, 24, 29, 33, 38, 39, 40, 41 and 42) to black glass pane named " "
        make gui slot (18, 19, 20, 24, 25 and 26) to light green glass pane named "&aPay Line"
        make gui slot 45 to skull of {_p} named "&6%{_p}%" with lore "" and "&6Balance&7: &2$&a%slotsformatNum({_p}'s balance)%"
        make gui slot 47 to glowing book named "&3Payouts":
            slotsPayouts({_p}, {_room})
        make gui slot 48 to glowing cauldron named "&bJ&3a&bc&3k&bp&3o&bt" with lore "" and "&6Current&7: &2$&a%slotsformatNum({slotsjackpot::%{_room}%})%"
        make gui slot 49 to glowing sunflower named "&6Bet" with lore "", "&6Current&7: &8(&2$&a%slotsformatNum({slotscurrentbet::%{_p}%})%&8)", "" and "&a&lClick to change":
            slotsBetCheck({_p}, {_room}, 1)
        if {slotsspinning::%{_p}%} is false:
            make gui slot 50 to stone button named "&aSpin":
                if {slotsspinning::%{_p}%} is false:
                    if {_p}'s balance >= {slotscurrentbet::%{_p}%}:
                        remove {slotscurrentbet::%{_p}%} from {_p}'s balance
                        add ({slotscurrentbet::%{_p}%}/100 * 10) to {slotsjackpot::%{_room}%}
                        set {slotsspinning::%{_p}%} to true
                        slotsBetCheck({_p}, {_room}, 0)
                        slotsRun({_p}, {_room}, {slotscurrentbet::%{_p}%})
                    else:
                        send "" to {_p}
                        send "        &c- Error -" to {_p}
                        send "        &c- Not enough money -" to {_p}
                        send "" to {_p}
                else:
                    cancel event
        make gui slot 53 to glowing arrow named "&7Back":
            slotsMenu({_p})
    open last gui to {_p}
    set {slotsguiopen::%{_p}%} to 0
    stop

function slotsPrizeOutcome(p: player, room: text, prize: number, bet: number, colour: text):
    if {_colour} is "Light Gray Dye":
        set {_1} to 0.5
        set {_2} to 1
    if {_colour} is "Yellow Dye":
        set {_1} to 0.7
        set {_2} to 1.125
    if {_colour} is "Green Dye":
        set {_1} to 0.9
        set {_2} to 1.25
    if {_colour} is "Light Blue Dye":
        set {_1} to 1.2
        set {_2} to 1.5
    if {_colour} is "Orange Dye":
        set {_1} to 1.5
        set {_2} to 1.8
    if {_colour} is "Pink Dye":
        set {_1} to 1.8
        set {_2} to 2.1
    if {_colour} is "Purple Dye":
        set {_1} to 2.2
        set {_2} to 2.5
        set {_ultimate} to true
    if {_prize} is 1:
        add ({slotscurrentbet::%{_p}%} * {_1}) to {_p}'s balance
        set {_w1} to slotsformatNum(({slotscurrentbet::%{_p}%} * {_1}))
        set {_jp} to "&bMinor"
    if {_prize} is 2:
        add ({slotsjackpot::%{_room}%} * {_2}) to {_p}'s balance
        set {_w1} to slotsformatNum(({slotsjackpot::%{_room}%} * {_2}))
        set {_b} to slotsformatNum({_bet})
        set {_jp} to "&3Major"
        if {_ultimate} is true:
            broadcast ""
            broadcast "        &6%{_p}% &ehas won the &bUltimate &eJackpot"
            broadcast "        &eBy landing on &73 &5Purple Dye &ein a row"
            broadcast "        &eBet &2$&a%{_b}%"
            broadcast "        &eAmount Won: &2$&a%{_w1}%"
            broadcast ""
        set {slotsjackpot::%{_room}%} to {%{_room}%}
    wait 2 ticks
    send "" to {_p}
    send "        &eYou have won the %{_jp}% &eJackpot" to {_p}
    send "        &eAmount Won: &2$&a%{_w1}%" to {_p}
    send "" to {_p}

function slotsOutcomeGuiChange(p: player, type: number):
    if {_type} is 1:
        set {_item} to light green glass pane
    if {_type} is 2:
        set {_item} to red glass pane
    loop 3 times:
        format gui slot (2, 3, 4, 5, 6, 11, 15, 29, 33, 38, 39, 40, 41 and 42) of {_p} with {_item} named ""
        wait 5 ticks
        format gui slot (2, 3, 4, 5, 6, 11, 15, 29, 33, 38, 39, 40, 41 and 42) of {_p} with black glass pane named " "
        wait 5 ticks
 
function slotsRun(p: player, room: text, bet: number):
    loop 22 times:
        add "Light Gray Dye" to {_items::*}
    loop 16 times:
        add "Yellow Dye" to {_items::*}
    loop 11 times:
        add "Green Dye" to {_items::*}
    loop 7 times:
        add "Light Blue Dye" to {_items::*}
    loop 4 times:
        add "Orange Dye" to {_items::*}
    loop 2 times:
        add "Pink Dye" to {_items::*}
    add "Purple Dye" to {_items::*}
    format gui slot (12, 13, 14, 21, 22, 23, 30, 31, and 32) of {_p} with black glass pane named " "
    loop 15 times:
        loop 3 times:
            if {slotsguiopen::%{_p}%} is 1:
                stop loop
            loop 3 times:
                set {_reel%loop-number-3%} to a random element out of {_items::*}
            loop 3 times:
                format gui slot (11 + loop-number-3) of {_p} with {_reel%loop-number-3%} parsed as an item named " "
                format gui slot (20 + loop-number-3) of {_p} with {_reel%loop-number-3%2} parsed as an item named " "
                format gui slot (29 + loop-number-3) of {_p} with {_reel%loop-number-3%3} parsed as an item named " "
            loop 3 times:
                set {_slot%loop-number-3%} to {_reel%loop-number-3%2}
            loop 3 times:
                set {_reel%loop-number-3%3} to {_reel%loop-number-3%2}
            loop 3 times:
                set {_reel%loop-number-3%2} to {_reel%loop-number-3%}         
            wait 3 ticks
    if {slotsguiopen::%{_p}%} is 1:
        stop
    if {_slot1} is {_slot3}:
        if {_slot1} is {_slot2}:
            slotsOutcomeGuiChange({_p}, 1)
            slotsPrizeOutcome({_p}, {_room}, 2, {_bet}, {_slot2})
    else if {_slot1} is {_slot2}:
        slotsOutcomeGuiChange({_p}, 1)
        slotsPrizeOutcome({_p}, {_room}, 1, {_bet}, {_slot2})
    else:
        slotsOutcomeGuiChange({_p}, 2)
    wait 1 second
    set {slotsspinning::%{_p}%} to false
    slotsBetCheck({_p}, {_room}, 0)

function slotsMenu(p: player):
    set {slotsspinning::%{_p}%} to false
    create a gui with virtual chest named "{@GUIName} &3Menu" with 3 rows:
        loop 27 times:
            make gui slot (loop-number - 1) to gray glass pane named " "
        make gui slot 4 to skull of {_p} named "&6%{_p}%" with lore "" and "&6Balance&7: &2$&a%slotsformatNum({_p}'s balance)%"
        make gui slot 10 to coal named "&eLow &7Room" with lore "", "&6Bets&7:" and "&2$&a1 &e» &2$&a100":
            slotsBetCheck({_p}, "low", 0)
        make gui slot 11 to iron ingot named "&6Med &7Room" with lore "", "&6Bets&7:" and "&2$&a100 &e» &2$&a1K":
            slotsBetCheck({_p}, "med", 0)
        make gui slot 12 to gold ingot named "&cHigh &7Room" with lore "", "&6Bets&7:" and "&2$&a1K &e» &2$&a10K":
            slotsBetCheck({_p}, "high", 0)
        make gui slot 13 to lapis lazuli named "&4Mega &7Room" with lore "", "&6Bets&7:" and "&2$&a10K &e» &2$&a100K":
            slotsBetCheck({_p}, "mega", 0)
        make gui slot 14 to glowing redstone dust named "&dUltra &7Room" with lore "", "&6Bets&7:" and "&2$&a100K &e» &2$&a1M":
            slotsBetCheck({_p}, "ultra", 0)
        make gui slot 15 to glowing diamond named "&5Insane &7Room" with lore "", "&6Bets&7:" and "&2$&a1M &e» &2$&a100M":
            slotsBetCheck({_p}, "insane", 0)
        make gui slot 16 to glowing emerald named "&b&lL&3&lu&b&ld&3&li&b&lc&3&lr&b&lo&3&lu&b&ls &7Room" with lore "", "&6Bets&7:" and "&2$&a100M &e» &2$&a1B":
            slotsBetCheck({_p}, "ludicrous", 0)
        make gui slot 22 to book named "&7-&6Information&7-" with lore "" and "&7--&6READ&7-&6ME&7--":
            close {_p}'s inventory
            slotsInformation({_p})
    open last gui to {_p}
    stop

function slotsInformation(p: player):
    send "" to {_p}
    send "        &3Slots &6Information" to {_p}
    send "        &7--------------" to {_p}
    send "" to {_p}
    send "      &7Match &7&o2 &7of the same" to {_p}
    send "      &7for a &o2.5x &7bet prize" to {_p}
    send "" to {_p}
    send "      &7Match &7&o3 &7of the same" to {_p}
    send "       &7to win the Jackpot" to {_p}
    send "" to {_p}
    send "  &710 percent of all bets will" to {_p}
    send "&7be added to the jackpot's pot" to {_p}
    send "" to {_p}
    send "  &7If you leave the game whilst" to {_p}
    send "    &7it is running, you will lose" to {_p}
    send "        &7your current bet" to {_p}
    send "" to {_p}

on script load:
    add "Low", "Med", "High", "Mega", "Ultra", "Insane" and "Ludicrous" to {_list::*}
    loop {_list::*}:
        if {slotsjackpot::%loop-value%} is not set:
            set {slotsjackpot::%loop-value%} to {%loop-value%}

on inventory close:
    if event-inventory's display name contains "{@GUIName}":
        if {slotsguiopen::%player%} is 0:
            set {slotsguiopen::%player%} to 1

command /slots [<text>]:
    trigger:
        if arg 1 is not set:
            slotsMenu(player)